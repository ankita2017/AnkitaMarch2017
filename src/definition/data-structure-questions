Please answer the below Data Structure Questions:
Q.1. why do we need data structure?
Ans : Data Structure is a particular way of storing and organizing data or information in a computer so that it can be retrieved
and used most productively.

Q.2. List out the areas in which data structures are applied extensively?
Ans : Operating System, Database Management System, Artificial Intelligence, Simulation, Graphics.

Q.3. what is an Array?
Ans : An array is a container that holds a fixed number of values of single type. The length of the array is established when it 
is created.  Each item in array is called an element.

Q.4. what is the difference between the Array and ArrayList?
Ans :  ARRAY
i. 	Array is static in size, i.e. fixed length
ii. Array contains both primitive data types(int, float, double) and objects 
iii. Use for loop or each loop to iterate through array.
iv. Each array object has the length variable which returns the length of the array.
v. Insert elements using assignment operator.
vi. Array can be multi-dimensional.

	ARRAYLIST
i. ArrayList is dynamic in size. As elements are added to the arraylist, its capacity grows automatically.
ii. ArrayList contain only objects.
iii. Use Iterator to iterate through arraylist.
iv. Length of the arraylist is provided by the size() method.
v. Insert elements using add() method.
vi. Arraylist is always single dimensional.

Q.5. what is LinkedList?
Ans : LinkedList is a linear data structure where each element is a separate object. Each element or node consist of two items:
data and a reference to the next node. The last node points to null.

Q.6. what is queue?
Ans : Queue represents the ordered list of objects just like list. It follows FIFO (First-In-First-Out).
Elements are inserted at the end of the queue and removed from the beginning.

Q.7. what is stack?
Ans : A stack is a data structure that allows data to be inserted "push" and removed "pop".It follows LIFO(Last-In-First-Out).

Q.8. what is FIFO and LIFO?
Ans : FIFO is First In First Out example Queue
	  LIFO is Last In First Out example stack

Q.9. what is the order of complexity?
Ans : Big O notation is used to classify algorithms according to how their running time or space requirements grow  as the input 
size grows.

Q.10. what is the best case to search an element from an array?
Ans : Binary Search

Q.11. what is the worst case to search an element from an array?
Ans : Linear Search

Q.12. what is tree in data structure?
Ans : A tree implement ADT (Abstract Data Type)	wit a root value and subtrees of children with parent node, represented as a 
set of linked nodes. Or a Tree can be defined as a collection of nodes, where each node is a data structure of a value , together
with a list of references to nodes(children).

Q.13. what is graph in data structure?
Ans : A graph is a set of items connected by edges. Each  item is called a vertex or a node. A graph is  set of vertices
and a binary relation between vertices, adjacency.

Q.14. what is the difference between the HashTable and HashMap?
Ans : 											HashMap								HashTable
		Synchronized							No										Yes
		Thread-Safe								No										Yes
		Null Keys & Null Values					One null key,any null values		Not permit null keys and values
		Iterator type							Fail fast iterator						Fail safe iterator
		Performance								Fast									Slow in comparison
		SuperClass & Legacy						Inherits Abstract Map, No				Inherits Dictionary, Yes

Q.15. What are the major data structures used in the following areas : RDBMS, Network data model and Hierarchical data model.
Ans : 	RDMS					Array
		Network Data Model		Graph
		Hierarchical data Model	Trees


Q.16. How HashMap works in java?
Ans : HashMap works on the principle of Hashing. 
Hash Function , Hash Value and Bucket .
hashCode() function  which returns an integer value is the Hash function. This method is present in Object class ( Mother of all class ).
hashCode method return  int value .So the Hash value is the int value returned by the hash function .
A bucket is used to store key value pairs . A bucket can have multiple key-value pairs . 
In hash map, bucket used simple linked list to store objects .
HashMap get(Key k) method calls hashCode method on the key object and applies returned hashValue to its own static hash function
 to find a bucket location(backing array) where keys and values are stored in form of a nested class called Entry (Map.Entry) . 
 Both key and value is stored in the bucket as a form of  Entry object. Whenever we call get( Key k )  method on the HashMap object . 
 First it checks that whether key is null or not .  Note that there can only be one null key in HashMap 

Q.17. What is ArrayIndexOutOfBoundsException in java? When it occurs?
Ans : The problem of accessing an array element beyond the size of array is represented by a class known as 
ArrayIndexOutOfBoundsException (from java.lang package). 

Q.18. What are the different ways of copying an array into another array?
Ans : \\Method 1
		public class A{
		public static void main(String args[])
		{
			int a[] = {1,2,3,4,5};
			int b = new int[a.length];
			
			for(int i=0; i<a.length; i++)
				b[i] = a[i];
		}
			}
			
		\\Method 2
		b = Arrays.copyOf(a, a.length);
		
		\\Method 3
		b = new int[a.length];
		System.arraycopy(a, 0, b, 0, b.length);
		
		\\Method 4
		b= a.clone();
		

Q.19. What is difference between an array and a linked list?
Ans :		Array
i. 			Array is a collection of elements of same data type with common name.
ii. 		Elements can be randomly accessed using index. Array provides fast and random access.
iii.		Elements are stored in consecutive manner in memory.
iv. 		Insertion and deletion take more time as elements are stored in consecutive memory allocation.
v.			Static memory allocation, memory is allocated at the compile time.
vi.			Array can be single/multi dimensional.
vii. 		No pointers are used like linked list, so no extra memory space needed for pointer.

			LinkedList
i. 			It is an ordered collection of elements which are connected by pointers/link.
ii.			Elements can't be accessed randomly, only sequentially.
iii.		Elements can be stored in any available place, as address of node is stored in previous node.
iv.			Insertion and deletion are fast as the value of the pointer needs to be changed.
v.			Dynamic memory allocation, memory is allocated at the run time.
vi.			Linked list can be singly, doubly or circular.
vii.		Adjacency between elements is maintained using pointers or links. Extra memory space is needed.


Q.20. What is DFS and BFS?
Ans : Depth First Search and Breadth First Search are two algorithms used for traversing and searching a node in graph.
They can also be used to find out whether  a node is reachable from a given node or not.

Q.21. What is Recursion?
Ans : A Recurssion is a process in which a method calls itself continuously. It makes the code compact but complex.

Q.22. What is Big-(O)-notation?
Ans : Big O describes the worst case scenario, and can be used to describe the execution time required or space used by an
algorithm.

Q.23. Outlined different kind of sorting algorithm with time complexity?
Ans : 			Algorithm			Time Complexity
										Best			Average			Worst
				Quicksort			O(n log(n))		O(n log(n))		O(n^2)
				Mergesort			O(n log(n))		O(n log(n))		O(n log(n))
				Heapsort			O(n log(n))		O(n log(n))		O(n log(n))
				Bubble Sort				O(n)		O(n^2)			O(n^2)
				Insertion Sort			O(n)		O(n^2)			O(n^2)
				Select Sort				O(n^2)		O(n^2)			O(n^2)
				Bucket Sort				O(n+k)		O(n+k)			O(n^2)
				Radix Sort				O(nk)		O(nk)			O(nk)

Q.24. Draw a table with time complexity in which it will summarize all the data structure feature's advantages and disadvantages.
  a)In terms of Accessing element.
  b)In terms of Inserting element.
  c)In terms of Searching element.
  d)In terms of Removing element.
  
 Ans :   
 
---------------------+----------+------------+----------+--------------+
|                      |  Insert  |   Delete   |  Search  | Space Usage  |
+----------------------+----------+------------+----------+--------------+
| Unsorted array       | O(1)     | O(1)       | O(n)     | O(n)         |
| Value-indexed array  | O(1)     | O(1)       | O(1)     | O(n)         |
| Sorted array         | O(n)     | O(n)       | O(log n) | O(n)         |
| Unsorted linked list | O(1)*    | O(1)*      | O(n)     | O(n)         |
| Sorted linked list   | O(n)*    | O(1)*      | O(n)     | O(n)         |
| Balanced binary tree | O(log n) | O(log n)   | O(log n) | O(n)         |
| Heap                 | O(log n) | O(log n)** | O(n)     | O(n)         |
| Hash table           | O(1)     | O(1)       | O(1)     | O(n)         |
+----------------------+----------+------------+----------+--------------+
 